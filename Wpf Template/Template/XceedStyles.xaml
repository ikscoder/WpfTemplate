<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Wpf_Template"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
    
    
    <!--#region DateTimePicker-->
    <Style TargetType="{x:Type xctk:DateTimePicker}">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource DarkTextBrush}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="ShowDropDownButton" Value="True"/>
            <Setter Property="ShowButtonSpinner" Value="False"/>
            <Setter Property="BorderThickness" Value="0,0,0,2"/>
            <Setter Property="Template" Value="{DynamicResource DateTimePickerControlTemplate1}"/>
        </Style.Setters>
      
    </Style>

    <ControlTemplate x:Key="DateTimePickerControlTemplate1" TargetType="{x:Type xctk:DateTimePicker}">
        <Border>
            <Grid>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" VerticalContentAlignment="Stretch">
                        <xctk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="Transparent" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="True" IsUndoEnabled="True" MinWidth="20" Padding="{TemplateBinding Padding}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}"/>
                    </xctk:ButtonSpinner>
                    <ToggleButton x:Name="_calendarToggleButton" Background="White" Grid.Column="1" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                        <ToggleButton.IsHitTestVisible>
                            <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                <Binding.Converter>
                                    <xctk:InverseBoolConverter/>
                                </Binding.Converter>
                            </Binding>
                        </ToggleButton.IsHitTestVisible>
                        <ToggleButton.IsEnabled>
                            <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                <Binding.Converter>
                                    <xctk:InverseBoolConverter/>
                                </Binding.Converter>
                            </Binding>
                        </ToggleButton.IsEnabled>
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Grid SnapsToDevicePixels="True">
                                                <xctk:ButtonChrome x:Name="ToggleButtonChrome" BorderThickness="0" Background="{DynamicResource PrimaryBrush}" CornerRadius="0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}">
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="*"/>
                                                            <ColumnDefinition Width="Auto"/>
                                                        </Grid.ColumnDefinitions>
                                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                                        <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
                                                            <Path x:Name="Arrow" Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Fill="{DynamicResource SecondaryBrush}" Height="5" Margin="0,1,0,0" Width="9"/>
                                                        </Grid>
                                                    </Grid>
                                                </xctk:ButtonChrome>
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource DisabledColor}"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>
                        <ToggleButton.Visibility>
                            <TemplateBinding Property="ShowDropDownButton">
                                <TemplateBinding.Converter>
                                    <BooleanToVisibilityConverter/>
                                </TemplateBinding.Converter>
                            </TemplateBinding>
                        </ToggleButton.Visibility>
                    </ToggleButton>
                </Grid>
                <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False" ToolTip="">
                    <Popup.Resources>
                        <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                            <Style.Triggers>
                                <Trigger Property="Content" Value="">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Popup.Resources>
                    <Border BorderBrush="{DynamicResource PrimaryBrush}" BorderThickness="1" Padding="3" Background="{DynamicResource BackgroundBrush}">
                        <StackPanel>
                            <Calendar x:Name="PART_Calendar" BorderThickness="0" DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" DisplayDate="2012-09-07">
                                <Calendar.Template>
                                    <ControlTemplate TargetType="{x:Type Calendar}">
                                        <Viewbox Width="{Binding CalendarWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}">
                                            <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                                                <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}"/>
                                            </StackPanel>
                                        </Viewbox>
                                    </ControlTemplate>
                                </Calendar.Template>
                            </Calendar>
                            <xctk:TimePicker x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding TimePickerAllowSpin}" Background="{DynamicResource AlternativeBackgroundBrush}" ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource DarkTextBrush}" FormatString="{TemplateBinding TimeFormatString}" Format="{TemplateBinding TimeFormat}" IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}" Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}" ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}" Step="{TemplateBinding Step}" Text="" Visibility="{TemplateBinding TimePickerVisibility}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}" Watermark="{TemplateBinding TimeWatermark}"/>
                        </StackPanel>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryLightColor}"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
            </DataTrigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryLightColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledColor}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
            </Trigger>
            <Trigger Property="UpdateValueOnEnterKey" Value="True">
                <Setter Property="Value" TargetName="PART_TimeUpDown" Value="{Binding Value, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->



    <!--#region ColorPicker-->
    <Style TargetType="{x:Type xctk:ColorPicker}">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource DarkTextBrush}"/>
            <Setter Property="DisplayColorAndName" Value="True"/>
            <Setter Property="ShowDropDownButton" Value="False"/>
            <Setter Property="ShowAvailableColors" Value="True"/>
            <Setter Property="ShowStandardColors" Value="False"/>
            <Setter Property="AvailableColorsHeader" Value="  "/>
            <Setter Property="StandardButtonHeader" Value="  "/>
            <Setter Property="AdvancedButtonHeader" Value="  "/>
            <Setter Property="ColorMode" Value="ColorPalette"/>
            <Setter Property="Template" Value="{DynamicResource ColorPickerControlTemplate1}"/>
            <Setter Property="AvailableColors" Value="{Binding MaterialColorsCollection, Source={x:Static local:ColorCollections.ColorCollection}}"/>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect ShadowDepth="0" BlurRadius="0" Color="{DynamicResource ShadowColor}" />
                </Setter.Value>
            </Setter>
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="IsOpen" Value="True">
                <Setter Property="xctk:ColorPicker.Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="0" BlurRadius="10" Color="{DynamicResource ShadowColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ColorPickerControlTemplate1" TargetType="{x:Type xctk:ColorPicker}">
        <Grid>
            <ToggleButton x:Name="PART_ColorPickerToggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="True" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="22" Padding="{TemplateBinding Padding}" Style="{TemplateBinding ButtonStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                <ToggleButton.IsHitTestVisible>
                    <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                            <xctk:InverseBoolConverter/>
                        </Binding.Converter>
                    </Binding>
                </ToggleButton.IsHitTestVisible>
                <Grid Margin="2">
                    <ContentControl x:Name="ColorOnly">
                        <ContentControl.Style>
                            <Style TargetType="{x:Type ContentControl}">
                                <Setter Property="Focusable" Value="False"/>
                                <Setter Property="ContentTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <Border>
                                                <Border.Background>
                                                    <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                        <DrawingBrush.Drawing>
                                                            <DrawingGroup>
                                                                <GeometryDrawing Brush="White">
                                                                    <GeometryDrawing.Geometry>
                                                                        <RectangleGeometry Rect="0,0,100,100"/>
                                                                    </GeometryDrawing.Geometry>
                                                                </GeometryDrawing>
                                                                <GeometryDrawing Brush="LightGray">
                                                                    <GeometryDrawing.Geometry>
                                                                        <GeometryGroup>
                                                                            <RectangleGeometry Rect="0,0,50,50"/>
                                                                            <RectangleGeometry Rect="50,50,50,50"/>
                                                                        </GeometryGroup>
                                                                    </GeometryDrawing.Geometry>
                                                                </GeometryDrawing>
                                                            </DrawingGroup>
                                                        </DrawingBrush.Drawing>
                                                    </DrawingBrush>
                                                </Border.Background>
                                                <Rectangle>
                                                    <Rectangle.Fill>
                                                        <Binding Path="SelectedColor" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}">
                                                            <Binding.Converter>
                                                                <xctk:ColorToSolidColorBrushConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Rectangle.Fill>
                                                </Rectangle>
                                            </Border>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                    <Border x:Name="ColorAndName" Background="White" Visibility="Hidden">
                        <StackPanel Orientation="Horizontal">
                            <ContentControl BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}" BorderThickness="1" HorizontalAlignment="Left" Margin="2,1,4,1" Width="20">
                                <ContentControl.Style>
                                    <Style TargetType="{x:Type ContentControl}">
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <Border>
                                                        <Border.Background>
                                                            <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                <DrawingBrush.Drawing>
                                                                    <DrawingGroup>
                                                                        <GeometryDrawing Brush="White">
                                                                            <GeometryDrawing.Geometry>
                                                                                <RectangleGeometry Rect="0,0,100,100"/>
                                                                            </GeometryDrawing.Geometry>
                                                                        </GeometryDrawing>
                                                                        <GeometryDrawing Brush="LightGray">
                                                                            <GeometryDrawing.Geometry>
                                                                                <GeometryGroup>
                                                                                    <RectangleGeometry Rect="0,0,50,50"/>
                                                                                    <RectangleGeometry Rect="50,50,50,50"/>
                                                                                </GeometryGroup>
                                                                            </GeometryDrawing.Geometry>
                                                                        </GeometryDrawing>
                                                                    </DrawingGroup>
                                                                </DrawingBrush.Drawing>
                                                            </DrawingBrush>
                                                        </Border.Background>
                                                        <Rectangle>
                                                            <Rectangle.Fill>
                                                                <Binding Path="SelectedColor" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}">
                                                                    <Binding.Converter>
                                                                        <xctk:ColorToSolidColorBrushConverter/>
                                                                    </Binding.Converter>
                                                                </Binding>
                                                            </Rectangle.Fill>
                                                        </Rectangle>
                                                    </Border>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentControl.Style>
                            </ContentControl>
                            <TextBlock Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Border>
                </Grid>
            </ToggleButton>
            <Popup x:Name="PART_ColorPickerPalettePopup" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_ColorPickerToggleButton}" PopupAnimation="Slide" StaysOpen="False" ToolTip="" VerticalOffset="1" VerticalAlignment="Bottom">
                <Popup.Resources>
                    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                        <Style.Triggers>
                            <Trigger Property="Content" Value="">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Popup.Resources>
                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Padding="3" >
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#FFF0F0F0" Offset="0"/>
                            <GradientStop Color="#FFE5E5E5" Offset="1"/>
                        </LinearGradientBrush>
                    </Border.Background>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid x:Name="_colorPaletteHost" Margin="4" Visibility="Collapsed">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="1">
                                <Grid.Visibility>
                                    <TemplateBinding Property="ShowAvailableColors">
                                        <TemplateBinding.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Grid.Visibility>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Background="Transparent" Margin="0,0,0,1" Padding="2" Text="{TemplateBinding AvailableColorsHeader}"/>
                                    <ListBox x:Name="PART_AvailableColors" ItemsSource="{TemplateBinding AvailableColors}" Grid.Row="1">
                                        <ListBox.Style>
                                            <Style TargetType="{x:Type ListBox}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="BorderThickness" Value="0"/>
                                                <Setter Property="ItemsPanel">
                                                    <Setter.Value>
                                                        <ItemsPanelTemplate>
                                                            <WrapPanel IsItemsHost="True" Width="250"/>
                                                        </ItemsPanelTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ItemContainerStyle">
                                                    <Setter.Value>
                                                        <Style TargetType="{x:Type ListBoxItem}">
                                                            <Setter Property="ToolTip" Value="{Binding Name}"/>
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                        <Grid x:Name="mainGrid" ToolTip="{Binding Name}">
                                                                            <Grid.Resources>
                                                                                <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                                                                    <Style.Triggers>
                                                                                        <Trigger Property="Content" Value="">
                                                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                                                        </Trigger>
                                                                                    </Style.Triggers>
                                                                                </Style>
                                                                            </Grid.Resources>
                                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                            <Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                <Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                            </Border>
                                                                        </Grid>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                            </Trigger>
                                                                            <Trigger Property="IsSelected" Value="True">
                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                            </Trigger>
                                                                            <DataTrigger Binding="{Binding DisplayColorAndName, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="False">
                                                                                <Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
                                                                            </DataTrigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Style>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ItemTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <Grid>
                                                                <Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}" BorderThickness="0" Margin="0">
                                                                    <Border.Background>
                                                                        <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                            <DrawingBrush.Drawing>
                                                                                <DrawingGroup>
                                                                                    <GeometryDrawing Brush="White">
                                                                                        <GeometryDrawing.Geometry>
                                                                                            <RectangleGeometry Rect="0,0,100,100"/>
                                                                                        </GeometryDrawing.Geometry>
                                                                                    </GeometryDrawing>
                                                                                    <GeometryDrawing Brush="Transparent">
                                                                                        <GeometryDrawing.Geometry>
                                                                                            <GeometryGroup>
                                                                                                <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                <RectangleGeometry Rect="50,50,50,50"/>
                                                                                            </GeometryGroup>
                                                                                        </GeometryDrawing.Geometry>
                                                                                    </GeometryDrawing>
                                                                                </DrawingGroup>
                                                                            </DrawingBrush.Drawing>
                                                                        </DrawingBrush>
                                                                    </Border.Background>
                                                                    <Rectangle Height="25" Width="25">
                                                                        <Rectangle.Style>
                                                                            <Style TargetType="{x:Type Rectangle}">
                                                                                <Setter Property="Fill">
                                                                                    <Setter.Value>
                                                                                        <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                                                                                        <Binding Path="Color">
                                                                                            <Binding.Converter>
                                                                                                <xctk:ColorToSolidColorBrushConverter/>
                                                                                            </Binding.Converter>
                                                                                        </Binding>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </Rectangle.Style>
                                                                    </Rectangle>
                                                                </Border>
                                                            </Grid>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="SelectionMode" Value="Single"/>
                                            </Style>
                                        </ListBox.Style>
                                    </ListBox>
                                </Grid>
                            </Grid>
                            <Grid Grid.Row="2">
                                <Grid.Visibility>
                                    <TemplateBinding Property="ShowStandardColors">
                                        <TemplateBinding.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Grid.Visibility>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Background="Transparent" Margin="0,1" Padding="2" Text="{TemplateBinding StandardColorsHeader}"/>
                                    <ScrollViewer Grid.Row="1" Height="300">
                                        <ListBox x:Name="PART_StandardColors" >
                                            <ListBox.Style>
                                                <Style TargetType="{x:Type ListBox}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="BorderThickness" Value="0"/>
                                                    <Setter Property="ItemsPanel">
                                                        <Setter.Value>
                                                            <ItemsPanelTemplate>
                                                                <WrapPanel IsItemsHost="True" Width="200"/>
                                                            </ItemsPanelTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="ItemContainerStyle">
                                                        <Setter.Value>
                                                            <Style TargetType="{x:Type ListBoxItem}">
                                                                <Setter Property="ToolTip" Value="{Binding Name}"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                            <Grid x:Name="mainGrid" ToolTip="{Binding Name}">
                                                                                <Grid.Resources>
                                                                                    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                                                                        <Style.Triggers>
                                                                                            <Trigger Property="Content" Value="">
                                                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                                                            </Trigger>
                                                                                        </Style.Triggers>
                                                                                    </Style>
                                                                                </Grid.Resources>
                                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                <Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                    <Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                                </Border>
                                                                            </Grid>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                                    <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                                    <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                                </Trigger>
                                                                                <Trigger Property="IsSelected" Value="True">
                                                                                    <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                                    <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                                </Trigger>
                                                                                <DataTrigger Binding="{Binding DisplayColorAndName, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="False">
                                                                                    <Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
                                                                                </DataTrigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="ItemTemplate">
                                                        <Setter.Value>
                                                            <DataTemplate>
                                                                <Grid>
                                                                    <Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}" BorderThickness="1" Margin="2">
                                                                        <Border.Background>
                                                                            <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                                <DrawingBrush.Drawing>
                                                                                    <DrawingGroup>
                                                                                        <GeometryDrawing Brush="White">
                                                                                            <GeometryDrawing.Geometry>
                                                                                                <RectangleGeometry Rect="0,0,100,100"/>
                                                                                            </GeometryDrawing.Geometry>
                                                                                        </GeometryDrawing>
                                                                                        <GeometryDrawing Brush="LightGray">
                                                                                            <GeometryDrawing.Geometry>
                                                                                                <GeometryGroup>
                                                                                                    <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                    <RectangleGeometry Rect="50,50,50,50"/>
                                                                                                </GeometryGroup>
                                                                                            </GeometryDrawing.Geometry>
                                                                                        </GeometryDrawing>
                                                                                    </DrawingGroup>
                                                                                </DrawingBrush.Drawing>
                                                                            </DrawingBrush>
                                                                        </Border.Background>
                                                                        <Rectangle Height="14" Width="14">
                                                                            <Rectangle.Style>
                                                                                <Style TargetType="{x:Type Rectangle}">
                                                                                    <Setter Property="Fill">
                                                                                        <Setter.Value>
                                                                                            <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                                                                                            <Binding Path="Color">
                                                                                                <Binding.Converter>
                                                                                                    <xctk:ColorToSolidColorBrushConverter/>
                                                                                                </Binding.Converter>
                                                                                            </Binding>
                                                                                        </Setter.Value>
                                                                                    </Setter>
                                                                                </Style>
                                                                            </Rectangle.Style>
                                                                        </Rectangle>
                                                                    </Border>
                                                                </Grid>
                                                            </DataTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="SelectionMode" Value="Single"/>
                                                </Style>
                                            </ListBox.Style>
                                        </ListBox>
                                    </ScrollViewer>
                                </Grid>
                            </Grid>
                            <Grid Margin="0,1" Grid.Row="3">
                                <Grid.Visibility>
                                    <TemplateBinding Property="ShowRecentColors">
                                        <TemplateBinding.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Grid.Visibility>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="22"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Background="AliceBlue" Margin="0,1" Padding="2" Text="{TemplateBinding RecentColorsHeader}"/>

                                    <ListBox x:Name="PART_RecentColors" Grid.Row="1">
                                        <ListBox.Style>
                                            <Style TargetType="{x:Type ListBox}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="BorderThickness" Value="0"/>
                                                <Setter Property="ItemsPanel">
                                                    <Setter.Value>
                                                        <ItemsPanelTemplate>
                                                            <WrapPanel IsItemsHost="True" Width="200"/>
                                                        </ItemsPanelTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ItemContainerStyle">
                                                    <Setter.Value>
                                                        <Style TargetType="{x:Type ListBoxItem}">
                                                            <Setter Property="ToolTip" Value="{Binding Name}"/>
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                        <Grid x:Name="mainGrid" ToolTip="{Binding Name}">
                                                                            <Grid.Resources>
                                                                                <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                                                                    <Style.Triggers>
                                                                                        <Trigger Property="Content" Value="">
                                                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                                                        </Trigger>
                                                                                    </Style.Triggers>
                                                                                </Style>
                                                                            </Grid.Resources>
                                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                            <Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                <Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                            </Border>
                                                                        </Grid>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                            </Trigger>
                                                                            <Trigger Property="IsSelected" Value="True">
                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
                                                                            </Trigger>
                                                                            <DataTrigger Binding="{Binding DisplayColorAndName, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="False">
                                                                                <Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
                                                                            </DataTrigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Style>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ItemTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <Grid>
                                                                <Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}" BorderThickness="1" Margin="2">
                                                                    <Border.Background>
                                                                        <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                            <DrawingBrush.Drawing>
                                                                                <DrawingGroup>
                                                                                    <GeometryDrawing Brush="White">
                                                                                        <GeometryDrawing.Geometry>
                                                                                            <RectangleGeometry Rect="0,0,100,100"/>
                                                                                        </GeometryDrawing.Geometry>
                                                                                    </GeometryDrawing>
                                                                                    <GeometryDrawing Brush="LightGray">
                                                                                        <GeometryDrawing.Geometry>
                                                                                            <GeometryGroup>
                                                                                                <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                <RectangleGeometry Rect="50,50,50,50"/>
                                                                                            </GeometryGroup>
                                                                                        </GeometryDrawing.Geometry>
                                                                                    </GeometryDrawing>
                                                                                </DrawingGroup>
                                                                            </DrawingBrush.Drawing>
                                                                        </DrawingBrush>
                                                                    </Border.Background>
                                                                    <Rectangle Height="14" Width="14">
                                                                        <Rectangle.Style>
                                                                            <Style TargetType="{x:Type Rectangle}">
                                                                                <Setter Property="Fill">
                                                                                    <Setter.Value>
                                                                                        <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                                                                                        <Binding Path="Color">
                                                                                            <Binding.Converter>
                                                                                                <xctk:ColorToSolidColorBrushConverter/>
                                                                                            </Binding.Converter>
                                                                                        </Binding>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </Rectangle.Style>
                                                                    </Rectangle>
                                                                </Border>
                                                            </Grid>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="SelectionMode" Value="Single"/>
                                            </Style>
                                        </ListBox.Style>
                                    </ListBox>

                                </Grid>
                            </Grid>
                        </Grid>
                        <Grid Grid.Row="0" x:Name="_colorCanvasHost" Visibility="Collapsed">
                            <xctk:ColorCanvas BorderThickness="0" Background="Transparent" SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                        <Separator HorizontalAlignment="Stretch" Margin="5,0" Grid.Row="1">
                            <Separator.Visibility>
                                <TemplateBinding Property="ShowAdvancedButton">
                                    <TemplateBinding.Converter>
                                        <BooleanToVisibilityConverter/>
                                    </TemplateBinding.Converter>
                                </TemplateBinding>
                            </Separator.Visibility>
                        </Separator>
                        <Button x:Name="PART_ColorModeButton" Margin="5" Grid.Row="2">
                            <Button.Visibility>
                                <TemplateBinding Property="ShowAdvancedButton">
                                    <TemplateBinding.Converter>
                                        <BooleanToVisibilityConverter/>
                                    </TemplateBinding.Converter>
                                </TemplateBinding>
                            </Button.Visibility>
                        </Button>
                    </Grid>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="DisplayColorAndName" Value="True">
                <Setter Property="Visibility" TargetName="ColorOnly" Value="Collapsed"/>
                <Setter Property="Visibility" TargetName="ColorAndName" Value="Visible"/>
            </Trigger>
            <Trigger Property="ColorMode" Value="ColorPalette">
                <Setter Property="Visibility" TargetName="_colorPaletteHost" Value="Visible"/>
                <Setter Property="Visibility" TargetName="_colorCanvasHost" Value="Collapsed"/>
                <Setter Property="Content" TargetName="PART_ColorModeButton" Value="{Binding AdvancedButtonHeader, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="ColorMode" Value="ColorCanvas">
                <Setter Property="Visibility" TargetName="_colorPaletteHost" Value="Collapsed"/>
                <Setter Property="Visibility" TargetName="_colorCanvasHost" Value="Visible"/>
                <Setter Property="Content" TargetName="PART_ColorModeButton" Value="{Binding StandardButtonHeader, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="ShowDropDownButton" Value="False">
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->
</ResourceDictionary>